@{
    ViewBag.Title = "Reports";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reports</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-image: url("https://img.freepik.com/premium-photo/abstract-design-elementannual-saleshopping-season-conceptmini-cart-with-colorful-paper-bag-white-wooden-table-backgroundtop-viewflat-lay_1040174-5645.jpg?ga=GA1.1.1982704250.1732540291&semt=ais_hybrid");
            background-repeat: no-repeat;
            background-size: cover;
        }

        h1 {
            text-align: center;
            color: black;
        }

        h2 {
            color: black;
        }

        button {
            padding: 10px;
            background-color: #3498db;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
            border-radius: 4px;
        }

            button:hover {
                background-color: #2980b9;
            }

        #responseMessage {
            margin-top: 20px;
            text-align: center;
            font-weight: bold;
        }

        #ReportsList {
            margin-top: 30px;
        }

        table {
            background-color: white;
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #2980b9;
            color: white;
            font-weight: bold;
        }

        tr:hover {
            background-color: #f1f1f1;
        }
    </style>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>

    <h1>Reports</h1>

    <!-- Stock Level Report Section -->
    <h2>Stock Level Report</h2>
    <button type="button" onclick="fetchStockLevelReport()">Fetch Stock Level Report</button>
    <button type="button" onclick="downloadStockLevelReport()" style="margin-left: 10px;">Download Stock Level Report</button>
    <div id="stockLevelResponseMessage"></div>
    <div id="stockLevelReportsList"></div>

    <br><br>

    <!-- Supplier Summary Report Section -->
    <h2>Supplier Summary Report</h2>
    <button type="button" onclick="fetchSupplierSummary()">Fetch Supplier Summary Report</button>
    <button type="button" onclick="downloadSupplierSummaryReport()" style="margin-left: 10px;">Download Supplier Summary Report</button>
    <div id="supplierSummaryResponseMessage"></div>
    <div id="supplierSummaryReportsList"></div>

    <script>
        // API URL for stock level report
        const apiUrlStockLevel = 'https://localhost:7254/api/Reports/stocklevelreport';
        let stockLevelReportData = []; // Store the fetched stock level report data

        // API URL for supplier summary report
        const apiUrlSupplierSummary = 'https://localhost:7254/api/Reports/supplier-summary';
        let supplierSummaryReportData = []; // Store the fetched supplier summary report data

        // Function to display success or error messages
        function displayMessage(message, isError = false, targetId) {
            const responseMessageDiv = document.getElementById(targetId);
            responseMessageDiv.style.color = isError ? "red" : "green";
            responseMessageDiv.textContent = message;
        }

        // Fetch Stock Level Report via AJAX
        function fetchStockLevelReport() {
            $.ajax({
                url: apiUrlStockLevel,
                type: 'GET',
                success: function (data) {
                    console.log('Stock Level Report Data:', data);  // Log data to check
                    if (data && data.length > 0) {
                        stockLevelReportData = data;  // Store the report data
                        displayMessage('Stock level report fetched successfully!', false, 'stockLevelResponseMessage');
                        displayStockLevelReports(data);
                    } else {
                        displayMessage('No stock level data available.', true, 'stockLevelResponseMessage');
                    }
                },
                error: function (xhr, status, error) {
                    displayMessage('Failed to fetch stock level report. Please try again later.', true, 'stockLevelResponseMessage');
                }
            });
        }

        // Display the Stock Level Report in a table
        function displayStockLevelReports(reports) {
            const reportsList = document.getElementById("stockLevelReportsList");

            let tableHTML = `<table>
                                        <tr><th>Supplier ID</th><th>Supplier Name</th><th>Product ID</th><th>Product Name</th><th>Stock Level</th><th>Reorder Level</th><th>Quantity Ordered</th></tr>`;

            reports.forEach(report => {
                tableHTML += `
                            <tr>
                                <td>${report.supplierId}</td>
                                <td>${report.supplierName}</td>
                                <td>${report.productId}</td>
                                <td>${report.productName}</td>
                                <td>${report.stockLevel}</td>
                                <td>${report.reorderLevel}</td>
                                <td>${report.quantity}</td>
                            </tr>`;
            });

            tableHTML += `</table>`;
            reportsList.innerHTML = tableHTML;
        }

        // Function to download the stock level report as CSV
        function downloadStockLevelReport() {
            if (stockLevelReportData.length === 0) {
                displayMessage('No data available to download', true, 'stockLevelResponseMessage');
                return;
            }

            const headers = ['Supplier ID', 'Supplier Name', 'Product ID', 'Product Name', 'Stock Level', 'Reorder Level', 'Quantity Ordered'];
            const rows = stockLevelReportData.map(report => [
                report.supplierId,
                report.supplierName,
                report.productId,
                report.productName,
                report.stockLevel,
                report.reorderLevel,
                report.quantity
            ]);

            const csvContent = [
                headers.join(','),
                ...rows.map(row => row.join(','))
            ].join('\n');

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);

            link.setAttribute('href', url);
            link.setAttribute('download', 'stock_level_report.csv');
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Fetch Supplier Summary Report via AJAX
        function fetchSupplierSummary() {
            $.ajax({
                url: apiUrlSupplierSummary,
                type: 'GET',
                success: function (data) {
                    console.log('Supplier Summary Report Data:', data);  // Log data to check
                    if (data && data.length > 0) {
                        supplierSummaryReportData = data;  // Store the report data
                        displayMessage('Supplier summary report fetched successfully!', false, 'supplierSummaryResponseMessage');
                        displaySupplierSummaryReports(data);
                    } else {
                        displayMessage('No supplier summary data available.', true, 'supplierSummaryResponseMessage');
                    }
                },
                error: function (xhr, status, error) {
                    displayMessage('Failed to fetch supplier summary report. Please try again later.', true, 'supplierSummaryResponseMessage');
                }
            });
        }

        // Display the Supplier Summary Report in a table
        function displaySupplierSummaryReports(reports) {
            const reportsList = document.getElementById("supplierSummaryReportsList");

            let tableHTML = `<table>
                                            <tr><th>Supplier ID</th><th>Supplier Name</th><th>Total Quantity</th><th>Total Revenue</th></tr>`;

            reports.forEach(report => {
                tableHTML += `
                                <tr>
                                    <td>${report.supplierId}</td>
                                    <td>${report.supplierName}</td>
                                    <td>${report.totalQuantity}</td>
                                    <td>${report.totalRevenue.toFixed(2)}</td>
                                </tr>`;
            });

            tableHTML += `</table>`;
            reportsList.innerHTML = tableHTML;
        }

        // Function to download the supplier summary report as CSV
        function downloadSupplierSummaryReport() {
            if (supplierSummaryReportData.length === 0) {
                displayMessage('No data available to download', true, 'supplierSummaryResponseMessage');
                return;
            }

            const headers = ['Supplier ID', 'Supplier Name', 'Total Quantity', 'Total Revenue'];
            const rows = supplierSummaryReportData.map(report => [
                report.supplierId,
                report.supplierName,
                report.totalQuantity,
                report.totalRevenue.toFixed(2)
            ]);

            const csvContent = [
                headers.join(','),
                ...rows.map(row => row.join(','))
            ].join('\n');

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);

            link.setAttribute('href', url);
            link.setAttribute('download', 'supplier_summary_report.csv');
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    </script>

</body>
</html>

